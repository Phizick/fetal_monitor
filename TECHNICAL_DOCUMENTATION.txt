================================================================================
                    СИСТЕМА МОНИТОРИНГА ПЛОДА
                    ТЕХНИЧЕСКАЯ ДОКУМЕНТАЦИЯ
================================================================================

АРХИТЕКТУРА СИСТЕМЫ
==================

Компоненты системы:
- Frontend (React): Пользовательский интерфейс для отображения данных
- Backend (FastAPI): API сервер для обработки запросов
- ML Engine (Python): Модуль машинного обучения для анализа данных
- Database (MongoDB): Хранение данных пациентов и сессий мониторинга
- Telegram Bot: Уведомления и алерты
- External API: Интеграция с внешними медицинскими системами

Схема взаимодействия:
[Медицинское оборудование] → [Frontend] → [Backend API] → [ML Engine] → [Database]
                                    ↓
                            [Telegram Bot] ← [External API]

ИНСТРУКЦИИ ПО УСТАНОВКЕ И РАЗВЕРТЫВАНИЮ
=======================================

Системные требования:
- ОС: Ubuntu 22.04 LTS (ARM64/x86_64)
- RAM: 8+ ГБ
- Storage: 128+ ГБ SSD
- CPU: 4+ ядра
- Network: Ethernet/Wi-Fi
- NPU: 6+ TOPS (опционально)

Установка Docker:
1. Обновление системы
   sudo apt update && sudo apt upgrade -y

2. Установка Docker
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
   echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   sudo apt update
   sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

3. Установка Docker Compose
   sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
   sudo chmod +x /usr/local/bin/docker-compose

Развертывание системы:
1. Клонирование репозитория
   git clone https://github.com/Phizick/fetal.git
   cd fetal

2. Сборка и запуск
   docker-compose build --no-cache
   docker-compose up -d

3. Проверка статуса
   docker-compose ps

ИНТЕГРАЦИЯ С МЕДИЦИНСКИМИ ИНФОРМАЦИОННЫМИ СИСТЕМАМИ (МИС)
========================================================

Поддерживаемые протоколы:

1. HL7 v2.5 (ORU^R01)
   - Назначение: Передача результатов наблюдений в МИС
   - Формат: MLLP (Minimal Lower Layer Protocol)
   - Стандарт: HL7 v2.5
   - Тип сообщения: ORU^R01 (Observation Result)
   - Кодировка: UTF-8

   Пример HL7 сообщения:
   MSH|^~\&|CTG_MONITOR|FetalUnit|MIS|Hospital|20240115103000||ORU^R01|MSG20240115103000|P|2.5|||||UTF-8
   PID|1||12345^^^HOSP^MR||Иванова^Анна
   OBR|1|12345^CTG|12345^CTG|CTG^Cardiotocography||||||||R
   OBX|1|NM|8867-4^FHR^LN|1|140|bpm||||F
   OBX|2|NM|11367-0^UC^LN|1|25.5|mm[Hg]||||F
   OBX|3|CE|PATH^Pathology^L|1|N^NO^L||||F

2. FHIR R4
   - Назначение: Современный стандарт обмена медицинскими данными
   - Формат: JSON
   - Стандарт: FHIR R4
   - Ресурсы: Patient, Device, Observation, DiagnosticReport
   - Кодировка: LOINC, SNOMED CT

   Пример FHIR Bundle:
   {
     "resourceType": "Bundle",
     "type": "collection",
     "entry": [
       {
         "resource": {
           "resourceType": "Patient",
           "id": "12345",
           "name": [{"family": "Иванова", "given": ["Анна"]}]
         }
       },
       {
         "resource": {
           "resourceType": "Observation",
           "code": {
             "coding": [{"code": "8867-4", "display": "Fetal Heart Rate", "system": "http://loinc.org"}]
           },
           "valueSampledData": {
             "data": "0.0,140 0.1,142 0.2,138"
           }
         }
       }
     ]
   }

3. DICOM
   - Назначение: Обмен медицинскими изображениями и данными
   - Формат: Binary
   - Стандарт: DICOM 3.0
   - Применение: Сохранение КТГ трассировок

Конфигурация интеграции:

HL7 конфигурация:
{
  "export_configs": {
    "default": {
      "hl7v2": {
        "version": "2.5",
        "mllp": {
          "host": "localhost",
          "port": 2575,
          "tls": false
        },
        "msh": {
          "sending_app": "CTG_MONITOR",
          "sending_facility": "FetalUnit",
          "receiving_app": "MIS",
          "receiving_facility": "Hospital",
          "message_type": "ORU^R01",
          "processing_id": "P",
          "version_id": "2.5"
        },
        "codes": {
          "fhr_loinc": "8867-4",
          "uc_loinc": "11367-0"
        }
      }
    }
  }
}

FHIR конфигурация:
{
  "export_configs": {
    "default": {
      "fhir": {
        "version": "R4",
        "base_url": "http://localhost:8080/fhir",
        "auth": {
          "type": "bearer",
          "token": "your_token_here"
        },
        "mapping": {
          "fhr_loinc": "8867-4",
          "uc_loinc": "11367-0",
          "device_type": "CTG_MONITOR",
          "device_manufacturer": "Fetal Monitoring System"
        }
      }
    }
  }
}

API для интеграции:

Экспорт в HL7:
POST /export/hl7/{patient_id}
Content-Type: application/json

{
  "config_name": "default",
  "observation_window_sec": 300
}

Экспорт в FHIR:
POST /export/fhir/{patient_id}
Content-Type: application/json

{
  "config_name": "default",
  "include_observations": true,
  "include_diagnostic_report": true
}

Получение статуса интеграции:
GET /integration/status

Ответ:
{
  "hl7": {
    "enabled": true,
    "last_export": "2024-01-15T10:30:00Z",
    "success_rate": 99.5
  },
  "fhir": {
    "enabled": true,
    "last_export": "2024-01-15T10:30:00Z",
    "success_rate": 98.8
  },
  "dicom": {
    "enabled": false,
    "last_export": null,
    "success_rate": 0
  }
}

API ДОКУМЕНТАЦИЯ
===============

Основные эндпоинты:

Управление пациентами:
- POST /patients - Создание нового пациента
- GET /patients - Получение списка пациентов
- GET /patients/{patient_id} - Получение данных пациента
- PUT /patients/{patient_id} - Обновление данных пациента
- DELETE /patients/{patient_id} - Удаление пациента

Мониторинг:
- POST /monitoring/start/{patient_id} - Запуск мониторинга
- POST /monitoring/stop/{patient_id} - Остановка мониторинга
- GET /monitoring/status/{patient_id} - Статус мониторинга

Потоки данных:
- GET /stream/patient/{patient_id} - SSE поток данных пациента
- GET /stream/sse - Общий SSE поток
- GET /stream/patient/001 - Поток пациента 001
- GET /stream/patient/002 - Поток пациента 002

Медицинские данные:
- GET /sim/patient/{patient_id} - Симуляция данных пациента
- GET /health - Проверка здоровья системы
- GET /docs - Swagger UI документация

Примеры запросов:

Создание пациента:
curl -X POST "http://localhost:8081/patients" \
  -H "Content-Type: application/json" \
  -d '{
    "full_name": "Иванова Анна Петровна",
    "medications": ["Магнезия", "Но-шпа"]
  }'

Запуск мониторинга:
curl -X POST "http://localhost:8081/monitoring/start/001"

Получение потока данных:
curl -N "http://localhost:8081/stream/patient/001"

АЛГОРИТМЫ МАШИННОГО ОБУЧЕНИЯ
============================

Обработка физиологических сигналов:

1. Предобработка данных:
   - Фильтрация шума: Применение медианного фильтра для удаления артефактов
   - Нормализация: Стандартизация данных по z-score
   - Импутация: Заполнение пропущенных значений медианными значениями

2. Извлечение признаков:
   - Частота сердечных сокращений плода (FHR): Базовые статистики (среднее, медиана, стандартное отклонение)
   - Вариабельность: Short-term и long-term variability
   - Акцелерации/децелерации: Обнаружение паттернов ускорения/замедления
   - Тонус матки: Анализ сократительной активности

3. Временные окна:
   - Короткие окна (10 сек): Для обнаружения акцелераций/децелераций
   - Средние окна (1-5 мин): Для анализа вариабельности
   - Длинные окна (10-60 мин): Для построения прогнозов

Алгоритмы выявления аномалий:

1. Классификация патологий:
   - Норма: FHR 110-160 bpm, нормальная вариабельность
   - Подозрительно: FHR 100-110 или 160-170 bpm, сниженная вариабельность
   - Патологично: FHR <100 или >170 bpm, отсутствие вариабельности

2. Обнаружение паттернов:
   - Брадикардия плода: FHR <100 bpm в течение >3 минут
   - Тахикардия плода: FHR >170 bpm в течение >10 минут
   - Сниженная вариабельность: <5 bpm в течение >30 минут
   - Тахисистолия матки: >5 сокращений за 10 минут

ML-модели и их характеристики:

1. Основная классификационная модель:
   - Алгоритм: Gradient Boosting Classifier
   - Признаки: 22 признака (FHR, вариабельность, акцелерации, децелерации, тонус матки)
   - Точность: 99.4% на тестовой выборке
   - Время обучения: ~2 минуты
   - Время инференса: ~5 мс

2. Модели прогнозирования:
   - Горизонт: 10, 30, 60 минут
   - Алгоритм: Random Forest Regressor
   - Признаки: Временные ряды FHR и тонуса матки
   - Метрики: MAE <0.1, R² >0.85

3. Оптимизация для edge-устройств:
   - ONNX Runtime: Кроссплатформенный инференс
   - INT8 квантизация: Снижение размера модели на 75%
   - Потоковая обработка: Обработка данных в реальном времени
   - Кэширование: Сохранение промежуточных результатов

Метрики качества:

1. Классификация:
   - Accuracy: 99.4%
   - Precision: 99.2%
   - Recall: 99.1%
   - F1-Score: 99.15%
   - AUC-ROC: 0.999

2. Прогнозирование:
   - MAE: 0.08
   - RMSE: 0.12
   - R²: 0.87
   - MAPE: 8.5%

ПОЛЬЗОВАТЕЛЬСКАЯ ДОКУМЕНТАЦИЯ
=============================

Руководство для медицинского персонала:

1. Запуск системы:
   1. Откройте браузер и перейдите на http://localhost
   2. Нажмите "Добавить пациента"
   3. Заполните данные пациента
   4. Нажмите "Запустить мониторинг"

2. Интерпретация данных:
   - Зеленый цвет: Нормальные показатели
   - Желтый цвет: Подозрительные показатели (требует внимания)
   - Красный цвет: Патологические показатели (требует немедленного вмешательства)

3. Основные функции:
   - Мониторинг в реальном времени: Отображение FHR и тонуса матки
   - Анализ патологий: Автоматическое выявление аномалий
   - Прогнозирование: Предсказание развития патологий
   - Уведомления: Telegram-алерты при критических состояниях

Рекомендации по использованию:

1. Клиническая практика:
   - Система предназначена для непрерывного мониторинга
   - Требует регулярной калибровки оборудования
   - Не заменяет клиническую оценку врача

2. Интерпретация результатов:
   - Все результаты должны быть проверены врачом
   - При критических показателях требуется немедленное вмешательство
   - Система предоставляет рекомендации, но не принимает решения

ТЕХНИЧЕСКОЕ ОПИСАНИЕ РЕАЛИЗАЦИИ
==============================

Технологический стек:

Backend:
- Python 3.12: Основной язык программирования
- FastAPI: Веб-фреймворк для API
- MongoDB: База данных для хранения данных
- Pandas/NumPy: Обработка данных
- Scikit-learn: Машинное обучение
- ONNX Runtime: Оптимизированный инференс

Frontend:
- React 18: Пользовательский интерфейс
- TypeScript: Типизированный JavaScript
- Chart.js: Визуализация данных
- Redux Toolkit: Управление состоянием
- Vite: Сборка и разработка

DevOps:
- Docker: Контейнеризация
- Docker Compose: Оркестрация сервисов
- Nginx: Веб-сервер и прокси
- Git: Контроль версий

Оптимизации для edge-устройств:

1. Производительность:
   - Многопоточность: Параллельная обработка данных
   - Кэширование: Сохранение промежуточных результатов
   - Потоковая обработка: Обработка данных в реальном времени
   - Оптимизация памяти: Эффективное использование RAM

2. Сетевые оптимизации:
   - SSE: Эффективная передача данных в реальном времени
   - Gzip: Сжатие HTTP-ответов
   - Кэширование: Кэширование статических ресурсов
   - CDN: Распределение контента

3. ML оптимизации:
   - ONNX: Кроссплатформенные модели
   - Квантизация: Снижение размера моделей
   - Батчинг: Групповая обработка запросов
   - Предсказание: Кэширование результатов

Схема развертывания:

1. Локальное развертывание:
   services:
     app:
       build: .
       ports:
         - "80:80"
         - "8081:8081"
       environment:
         - MONGO_URI=mongodb://mongo:27017
         - MONGO_DB=fetal
     mongo:
       image: mongo:6
       volumes:
         - mongo_data:/data/db

2. Облачное развертывание:
   - Docker Swarm: Для кластеров
   - Kubernetes: Для масштабируемых развертываний
   - AWS/Azure: Для облачных сервисов

Требования к аппаратному обеспечению:

Минимальные требования:
- CPU: 4 ядра ARM64 или x86_64
- RAM: 8 ГБ
- Storage: 128 ГБ SSD
- Network: 100 Mbps Ethernet

Рекомендуемые требования:
- CPU: 8 ядер с NPU 6+ TOPS
- RAM: 16 ГБ
- Storage: 256 ГБ NVMe SSD
- Network: 1 Gbps Ethernet

Оптимальные требования:
- CPU: 16 ядер с NPU 20+ TOPS
- RAM: 32 ГБ
- Storage: 512 ГБ NVMe SSD
- Network: 10 Gbps Ethernet

МОНИТОРИНГ И ЛОГИРОВАНИЕ
========================

Система мониторинга:
- Health checks: Проверка состояния сервисов
- Метрики производительности: CPU, RAM, диск, сеть
- Логи приложения: Структурированные логи
- Алерты: Уведомления о критических состояниях

Логирование:
- Уровни: DEBUG, INFO, WARNING, ERROR, CRITICAL
- Форматы: JSON для структурированных логов
- Ротация: Автоматическая ротация логов
- Агрегация: Централизованный сбор логов

БЕЗОПАСНОСТЬ
============

Аутентификация и авторизация:
- JWT токены: Для API аутентификации
- Роли пользователей: Администратор, врач, медсестра
- Права доступа: Гранулярные права доступа

Защита данных:
- Шифрование: TLS для передачи данных
- Анонимизация: Удаление персональных данных
- Аудит: Логирование всех действий
- Резервное копирование: Регулярные бэкапы

РАЗВИТИЕ И МАСШТАБИРОВАНИЕ
===========================

Планы развития:
- Интеграция с HL7/FHIR: Стандарты медицинских данных
- Мобильное приложение: iOS/Android приложения
- Облачная аналитика: Централизованная аналитика
- ИИ-ассистент: Интеллектуальные рекомендации

Масштабирование:
- Горизонтальное: Добавление серверов
- Вертикальное: Увеличение ресурсов
- Микросервисы: Разделение на независимые сервисы
- Кэширование: Redis для кэширования

================================================================================
                    КОНЕЦ ДОКУМЕНТАЦИИ
================================================================================
