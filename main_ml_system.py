#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ñ–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import os
import sys
import time
from datetime import datetime
from fetal_ml_model import FetalMLPredictor
from realtime_predictor import RealtimeFetalPredictor, DataEmulator, demo_realtime_prediction

def print_header(title):
    """
    –í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–º–∫–æ–π
    """
    print("\n" + "="*70)
    print(f" {title}")
    print("="*70)

def print_step(step_num, total_steps, description):
    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    """
    print(f"\n[–®–ê–ì {step_num}/{total_steps}] {description}")
    print("-" * 50)

def check_requirements():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    print_header("–ü–†–û–í–ï–†–ö–ê –¢–†–ï–ë–û–í–ê–ù–ò–ô")
    
    required_files = ['f_health.csv', 'fetal_ml_model.py', 'realtime_predictor.py']
    missing_files = []
    
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úì {file} - –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚úó {file} - –ù–ï –ù–ê–ô–î–ï–ù")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("\n‚úì –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def train_model():
    """
    –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    """
    print_step(1, 4, "–û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä
        predictor = FetalMLPredictor('f_health.csv')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        X, y = predictor.load_and_prepare_data()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/test
        print("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏...")
        predictor.split_data()
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
        print("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
        models = predictor.train_models()
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        print("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π...")
        predictor.evaluate_models()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        predictor.save_model()
        
        print("\n‚úì –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

def test_model():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    """
    print_step(2, 4, "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        predictor = FetalMLPredictor('f_health.csv')
        predictor.load_model()
        
        # –°–æ–∑–¥–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        emulator = DataEmulator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_samples = emulator.generate_batch(20)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
        correct_predictions = 0
        total_predictions = len(test_samples)
        
        for i, sample in enumerate(test_samples):
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å
            true_class = sample.get('fetal_health', 'unknown')
            
            # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = predictor.predict_single(sample)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            if prediction['prediction_code'] == true_class:
                correct_predictions += 1
            
            print(f"  –û–±—Ä–∞–∑–µ—Ü {i+1}: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ {prediction['prediction']}, "
                  f"–ò—Å—Ç–∏–Ω–∞ {true_class}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {prediction['confidence']:.3f}")
        
        accuracy = correct_predictions / total_predictions
        print(f"\n–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {accuracy:.3f} ({correct_predictions}/{total_predictions})")
        
        print("\n‚úì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def demo_realtime():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    print_step(3, 4, "–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        predictor = demo_realtime_prediction()
        
        print("\n‚úì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def create_summary_report():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã
    """
    print_step(4, 4, "–°–û–ó–î–ê–ù–ò–ï –°–í–û–î–ù–û–ì–û –û–¢–ß–ï–¢–ê")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        created_files = []
        expected_files = [
            'best_fetal_model.pkl',
            'best_fetal_model_scaler.pkl', 
            'best_fetal_model_features.pkl',
            # –í —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è
        ]
        
        for file in expected_files:
            if os.path.exists(file):
                created_files.append(file)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = f"""
–û–¢–ß–ï–¢ –û –†–ê–ë–û–¢–ï –°–ò–°–¢–ï–ú–´ –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

–°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:
"""
        
        for file in created_files:
            report += f"‚úì {file}\n"
        
        report += f"""
–í–°–ï–ì–û –°–û–ó–î–ê–ù–û –§–ê–ô–õ–û–í: {len(created_files)}/{len(expected_files)}

–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:
- –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
- –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
- –≠–º—É–ª—è—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã

–î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python realtime_predictor.py
2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞—Å—Å—ã –≤ —Å–≤–æ–µ–º –∫–æ–¥–µ:
   - FetalMLPredictor –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
   - RealtimeFetalPredictor –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
   - DataEmulator –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('ml_system_report.txt', 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(report)
        print("\n‚úì –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ml_system_report.txt")
        return True
        
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    """
    print_header("–°–ò–°–¢–ï–ú–ê –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø –î–õ–Ø –§–ï–¢–ê–õ–¨–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_requirements():
        print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤")
        return
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    if not train_model():
        print("\n‚ùå –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    if not test_model():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if not demo_realtime():
        print("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    if not create_summary_report():
        print("\n‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return
    
    print_header("–°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –ù–ê–°–¢–†–û–ï–ù–ê –ò –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï")
    print("""
üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –°–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ñ–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞!

–ß–¢–û –ë–´–õ–û –°–î–ï–õ–ê–ù–û:
‚úì –ú–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∞ –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚úì –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
‚úì –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚úì –°–æ–∑–¥–∞–Ω —ç–º—É–ª—è—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
‚úì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç—á–µ—Ç—ã

–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
1. –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã: python realtime_predictor.py
2. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–ª–∞—Å—Å—ã –∏–∑ –º–æ–¥—É–ª–µ–π
3. –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ

–§–ê–ô–õ–´ –°–ò–°–¢–ï–ú–´:
- best_fetal_model.pkl - –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
- best_fetal_model_scaler.pkl - –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
- best_fetal_model_features.pkl - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
- ml_system_report.txt - –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
- *.png - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
""")

if __name__ == "__main__":
    main()
